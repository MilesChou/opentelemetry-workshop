services:
  web:
    image: ghcr.io/mileschou/opentelemetry-workshop/base-image
    init: true
    working_dir: /usr/src/app
    environment:
      - DB_HOST=database
      - MAIL_MAILER=smtp
      - MAIL_HOST=smtp
      - MAIL_PORT=1025
      - OTEL_SERVICE_NAME=web
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://collector:4318/v1/traces
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://collector:4318/v1/metrics
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://collector:4318/v1/logs
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_PHP_TRACES_PROCESSOR=simple
      - OTEL_PHP_LOGS_PROCESSOR=simple
      - OTEL_PHP_AUTOLOAD_ENABLED=true
      - OTEL_PHP_TRACE_CLI_ENABLED=true
    ports:
      - "127.0.0.1:8000:8000/tcp"
    volumes:
      - .:/usr/src/app
    command: php -S 0.0.0.0:8000 -t public
    depends_on:
      migration:
        condition: service_completed_successfully
      composer:
        condition: service_completed_successfully

  migration:
    image: ghcr.io/mileschou/opentelemetry-workshop/base-image
    working_dir: /usr/src/app
    environment:
      - DB_HOST=database
      - OTEL_SERVICE_NAME=console
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://collector:4318/v1/traces
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://collector:4318/v1/metrics
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://collector:4318/v1/logs
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_PHP_TRACES_PROCESSOR=simple
      - OTEL_PHP_LOGS_PROCESSOR=simple
      - OTEL_PHP_AUTOLOAD_ENABLED=true
      - OTEL_PHP_TRACE_CLI_ENABLED=true
    volumes:
      - .:/usr/src/app
    command: php artisan migrate
    depends_on:
      database:
        condition: service_healthy
      bootstrapper:
        condition: service_completed_successfully
        required: false

  bootstrapper:
    image: ghcr.io/mileschou/opentelemetry-workshop/base-image
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
    command: sh -c "test ! -e .env && cp .env.example .env && php artisan key:generate"
    depends_on:
      database:
        condition: service_healthy
      composer:
        condition: service_completed_successfully

  composer:
    image: composer:2
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
    environment:
      - OTEL_PHP_DISABLED_INSTRUMENTATIONS=all
    command: composer install --ignore-platform-reqs

  database:
    image: postgres:16.4-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=opentelemetry_workshop
      - POSTGRES_PASSWORD=pass
    ports:
      - "127.0.0.1:5432:5432/tcp"
    healthcheck:
      test: pg_isready
      start_period: 10s
      interval: 3s
      timeout: 3s
      retries: 5

  hydra:
    image: oryd/hydra:v2.2.0
    restart: unless-stopped
    ports:
      - "127.0.0.1:4444:4444/tcp"
      - "127.0.0.1:4445:4445/tcp"
      - "127.0.0.1:4446:4446/tcp"
    environment:
      - SECRETS_SYSTEM=youReallyNeedToChangeThis
      - DSN=memory
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - LOG_LEAK_SENSITIVE_VALUES="true"
      - TRACING_SERVICE_NAME=hydra
      - TRACING_PROVIDER=otel
      - TRACING_PROVIDERS_OTLP_INSECURE=true
      - TRACING_PROVIDERS_OTLP_SAMPLING_SAMPLING_RATIO=1.0
      - TRACING_PROVIDERS_OTLP_SERVER_URL=collector:4318
    volumes:
      - hydra:/tmp
    entrypoint: []
    command: sh -c "hydra serve all --dev > /tmp/hydra.log 2>&1"

  smtp:
    image: mailhog/mailhog
    restart: unless-stopped
    ports:
      - "127.0.0.1:8025:8025/tcp"

  collector:
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.108.0
    restart: unless-stopped
    environment:
      # See https://github.com/open-telemetry/opentelemetry-collector/blob/main/extension/ballastextension/README.md
      - GOMEMLIMIT=384MiB
    volumes:
      - ./.docker/collector/config.yaml:/etc/otelcol-contrib/config.yaml
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    privileged: true
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /dev/disk/:/dev/disk:ro

  grafana:
    image: grafana/grafana:11.2.0
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000/tcp"
    environment:
      - GF_INSTALL_PLUGINS=grafana-pyroscope-app
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./.docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./.docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro

  prometheus:
    image: quay.io/prometheus/prometheus:v2.51.2
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090/tcp"
    command:
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--storage.tsdb.retention.time=1h"
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
      - "--web.route-prefix=/"
      - "--web.enable-admin-api"
      - "--web.enable-remote-write-receiver"
      - "--enable-feature=native-histograms"
      - "--enable-feature=exemplar-storage"
      - "--enable-feature=otlp-write-receiver"
    volumes:
      - ./.docker/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    healthcheck:
      test: wget http://127.0.0.1:9090/-/ready -q -O /tmp/ready
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5

  loki:
    image: grafana/loki:3.1.0
    restart: unless-stopped
    command: [
      "-config.file=/etc/loki/config.yaml",
      "-target=all"
    ]
    volumes:
      - ./.docker/loki/config.yaml:/etc/loki/config.yaml:ro
    healthcheck:
      test: wget http://127.0.0.1:3100/ready -q -O /tmp/ready
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5

  tempo:
    image: grafana/tempo:2.5.0
    init: true
    restart: unless-stopped
    command: [
      "-config.file=/etc/tempo/config.yaml"
    ]
    volumes:
      - ./.docker/tempo/config.yaml:/etc/tempo/config.yaml:ro
    healthcheck:
      test: wget http://127.0.0.1:3200/ready -q -O /tmp/ready
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5

  pyroscope:
    image: grafana/pyroscope:1.7.1
    restart: unless-stopped
    healthcheck:
      test: wget http://127.0.0.1:4040/healthz -q -O /tmp/healthz
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5

  promtail:
    image: grafana/promtail:3.0.0
    volumes:
      - ./.docker/promtail/config.yaml:/etc/promtail/config.yaml
      - hydra:/opt/log
    command: [
      "-config.file=/etc/promtail/config.yaml",
      "-config.expand-env=true",
    ]

volumes:
  hydra:
